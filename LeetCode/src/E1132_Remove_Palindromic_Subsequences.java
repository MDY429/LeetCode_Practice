/**
 * url: https://leetcode.com/problems/remove-palindromic-subsequences/
 * 
 * Given a string s consisting only of letters 'a' and 'b'. In a single step you
 * can remove one palindromic subsequence from s.
 * 
 * Return the minimum number of steps to make the given string empty.
 * 
 * A string is a subsequence of a given string, if it is generated by deleting
 * some characters of a given string without changing its order.
 * 
 * A string is called palindrome if is one that reads the same backward as well
 * as forward.
 * 
 * Example 1: Input: s = "ababa" Output: 1
 * 
 * Explanation: String is already palindrome
 * 
 * Example 2: Input: s = "abb" Output: 2
 * 
 * Explanation: "abb" -> "bb" -> "". Remove palindromic subsequence "a" then
 * "bb".
 * 
 * Example 3: Input: s = "baabb" Output: 2
 * 
 * Explanation: "baabb" -> "b" -> "". Remove palindromic subsequence "baab" then
 * "b".
 * 
 * Example 4: Input: s = "" Output: 0
 * 
 * Constraints:
 * 1. 0 <= s.length <= 1000
 * 2. s only consists of letters 'a' and 'b'
 */
public class E1132_Remove_Palindromic_Subsequences {

    /**
     * Because there only two letters, If it's empty sting, return 0; If it's
     * palindrome, return 1; Otherwise, we need at least 2 operation.
     * 
     * @param s The input of String
     * @return operation times.
     */
    public int removePalindromeSub(String s) {

        int len = s.length();
        if (len == 0) {
            return 0;
        }

        char[] c = new char[len];
        for (int i = len - 1; i >= 0; i--) {
            c[len - 1 - i] = s.charAt(i);
        }

        for (int i = 0; i < len; i++) {
            if (c[i] != s.toCharArray()[i]) {
                return 2;
            }
        }

        return 1;

    }

    public static void main(String[] args) {
        E1132_Remove_Palindromic_Subsequences e1132 = new E1132_Remove_Palindromic_Subsequences();
        String s = "abbab";
        System.out.println(e1132.removePalindromeSub(s));
    }
}